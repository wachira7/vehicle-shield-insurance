/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface InsuranceCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claims"
      | "coverageLimits"
      | "createPolicy"
      | "owner"
      | "policies"
      | "policyNFT"
      | "processClaim"
      | "registerVehicle"
      | "renounceOwnership"
      | "riskAssessment"
      | "submitClaim"
      | "transferOwnership"
      | "updateVerificationStatus"
      | "uploadVehiclePhotos"
      | "vehiclePhotos"
      | "vehicles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimPaid"
      | "ClaimProcessed"
      | "ClaimSubmitted"
      | "OwnershipTransferred"
      | "PhotosUploaded"
      | "PolicyCreated"
      | "VehicleRegistered"
      | "VerificationStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coverageLimits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "policyNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processClaim",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVehicle",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskAssessment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerificationStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadVehiclePhotos",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vehiclePhotos",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vehicles", values: [string]): string;

  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coverageLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVehicle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskAssessment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerificationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadVehiclePhotos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vehiclePhotos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vehicles", data: BytesLike): Result;
}

export namespace ClaimPaidEvent {
  export type InputTuple = [claimId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [claimId: bigint, amount: bigint];
  export interface OutputObject {
    claimId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimProcessedEvent {
  export type InputTuple = [claimId: BigNumberish, approved: boolean];
  export type OutputTuple = [claimId: bigint, approved: boolean];
  export interface OutputObject {
    claimId: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [claimId: BigNumberish, policyId: BigNumberish];
  export type OutputTuple = [claimId: bigint, policyId: bigint];
  export interface OutputObject {
    claimId: bigint;
    policyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhotosUploadedEvent {
  export type InputTuple = [regPlate: string, uploadDate: BigNumberish];
  export type OutputTuple = [regPlate: string, uploadDate: bigint];
  export interface OutputObject {
    regPlate: string;
    uploadDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyCreatedEvent {
  export type InputTuple = [
    policyId: BigNumberish,
    owner: AddressLike,
    vehicleId: string
  ];
  export type OutputTuple = [
    policyId: bigint,
    owner: string,
    vehicleId: string
  ];
  export interface OutputObject {
    policyId: bigint;
    owner: string;
    vehicleId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VehicleRegisteredEvent {
  export type InputTuple = [
    regPlate: string,
    owner: AddressLike,
    tier: BigNumberish
  ];
  export type OutputTuple = [regPlate: string, owner: string, tier: bigint];
  export interface OutputObject {
    regPlate: string;
    owner: string;
    tier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationStatusUpdatedEvent {
  export type InputTuple = [regPlate: string, status: BigNumberish];
  export type OutputTuple = [regPlate: string, status: bigint];
  export interface OutputObject {
    regPlate: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InsuranceCore extends BaseContract {
  connect(runner?: ContractRunner | null): InsuranceCore;
  waitForDeployment(): Promise<this>;

  interface: InsuranceCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claims: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, boolean, boolean] & {
        claimId: bigint;
        policyId: bigint;
        description: string;
        photoHash: string;
        amount: bigint;
        isProcessed: boolean;
        isPaid: boolean;
      }
    ],
    "view"
  >;

  coverageLimits: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  createPolicy: TypedContractMethod<
    [_regPlate: string, _duration: BigNumberish, _coverage: BigNumberish],
    [bigint],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  policies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        coverage: bigint;
        startDate: bigint;
        endDate: bigint;
        isActive: boolean;
        tier: bigint;
      }
    ],
    "view"
  >;

  policyNFT: TypedContractMethod<[], [string], "view">;

  processClaim: TypedContractMethod<
    [_claimId: BigNumberish, _approved: boolean],
    [void],
    "nonpayable"
  >;

  registerVehicle: TypedContractMethod<
    [
      _regPlate: string,
      _make: string,
      _model: string,
      _year: BigNumberish,
      _baseValue: BigNumberish,
      _mileage: BigNumberish,
      _condition: BigNumberish,
      _hasAccidentHistory: boolean
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  riskAssessment: TypedContractMethod<[], [string], "view">;

  submitClaim: TypedContractMethod<
    [
      _policyId: BigNumberish,
      _description: string,
      _photoHash: string,
      _amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVerificationStatus: TypedContractMethod<
    [_regPlate: string, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  uploadVehiclePhotos: TypedContractMethod<
    [
      _regPlate: string,
      _frontHash: string,
      _backHash: string,
      _leftHash: string,
      _rightHash: string,
      _mirrorLeftHash: string,
      _mirrorRightHash: string
    ],
    [void],
    "nonpayable"
  >;

  vehiclePhotos: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, bigint, boolean] & {
        frontHash: string;
        backHash: string;
        leftHash: string;
        rightHash: string;
        mirrorLeftHash: string;
        mirrorRightHash: string;
        uploadDate: bigint;
        isComplete: boolean;
      }
    ],
    "view"
  >;

  vehicles: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        regPlate: string;
        make: string;
        model: string;
        year: bigint;
        owner: string;
        status: bigint;
        tier: bigint;
        lastVerificationDate: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, boolean, boolean] & {
        claimId: bigint;
        policyId: bigint;
        description: string;
        photoHash: string;
        amount: bigint;
        isProcessed: boolean;
        isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "coverageLimits"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [_regPlate: string, _duration: BigNumberish, _coverage: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        coverage: bigint;
        startDate: bigint;
        endDate: bigint;
        isActive: boolean;
        tier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processClaim"
  ): TypedContractMethod<
    [_claimId: BigNumberish, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerVehicle"
  ): TypedContractMethod<
    [
      _regPlate: string,
      _make: string,
      _model: string,
      _year: BigNumberish,
      _baseValue: BigNumberish,
      _mileage: BigNumberish,
      _condition: BigNumberish,
      _hasAccidentHistory: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "riskAssessment"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      _description: string,
      _photoHash: string,
      _amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVerificationStatus"
  ): TypedContractMethod<
    [_regPlate: string, _status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uploadVehiclePhotos"
  ): TypedContractMethod<
    [
      _regPlate: string,
      _frontHash: string,
      _backHash: string,
      _leftHash: string,
      _rightHash: string,
      _mirrorLeftHash: string,
      _mirrorRightHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vehiclePhotos"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, bigint, boolean] & {
        frontHash: string;
        backHash: string;
        leftHash: string;
        rightHash: string;
        mirrorLeftHash: string;
        mirrorRightHash: string;
        uploadDate: bigint;
        isComplete: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vehicles"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        regPlate: string;
        make: string;
        model: string;
        year: bigint;
        owner: string;
        status: bigint;
        tier: bigint;
        lastVerificationDate: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ClaimPaid"
  ): TypedContractEvent<
    ClaimPaidEvent.InputTuple,
    ClaimPaidEvent.OutputTuple,
    ClaimPaidEvent.OutputObject
  >;
  getEvent(
    key: "ClaimProcessed"
  ): TypedContractEvent<
    ClaimProcessedEvent.InputTuple,
    ClaimProcessedEvent.OutputTuple,
    ClaimProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PhotosUploaded"
  ): TypedContractEvent<
    PhotosUploadedEvent.InputTuple,
    PhotosUploadedEvent.OutputTuple,
    PhotosUploadedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyCreated"
  ): TypedContractEvent<
    PolicyCreatedEvent.InputTuple,
    PolicyCreatedEvent.OutputTuple,
    PolicyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VehicleRegistered"
  ): TypedContractEvent<
    VehicleRegisteredEvent.InputTuple,
    VehicleRegisteredEvent.OutputTuple,
    VehicleRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VerificationStatusUpdated"
  ): TypedContractEvent<
    VerificationStatusUpdatedEvent.InputTuple,
    VerificationStatusUpdatedEvent.OutputTuple,
    VerificationStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "ClaimPaid(uint256,uint256)": TypedContractEvent<
      ClaimPaidEvent.InputTuple,
      ClaimPaidEvent.OutputTuple,
      ClaimPaidEvent.OutputObject
    >;
    ClaimPaid: TypedContractEvent<
      ClaimPaidEvent.InputTuple,
      ClaimPaidEvent.OutputTuple,
      ClaimPaidEvent.OutputObject
    >;

    "ClaimProcessed(uint256,bool)": TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;
    ClaimProcessed: TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;

    "ClaimSubmitted(uint256,uint256)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PhotosUploaded(string,uint256)": TypedContractEvent<
      PhotosUploadedEvent.InputTuple,
      PhotosUploadedEvent.OutputTuple,
      PhotosUploadedEvent.OutputObject
    >;
    PhotosUploaded: TypedContractEvent<
      PhotosUploadedEvent.InputTuple,
      PhotosUploadedEvent.OutputTuple,
      PhotosUploadedEvent.OutputObject
    >;

    "PolicyCreated(uint256,address,string)": TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;
    PolicyCreated: TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;

    "VehicleRegistered(string,address,uint8)": TypedContractEvent<
      VehicleRegisteredEvent.InputTuple,
      VehicleRegisteredEvent.OutputTuple,
      VehicleRegisteredEvent.OutputObject
    >;
    VehicleRegistered: TypedContractEvent<
      VehicleRegisteredEvent.InputTuple,
      VehicleRegisteredEvent.OutputTuple,
      VehicleRegisteredEvent.OutputObject
    >;

    "VerificationStatusUpdated(string,uint8)": TypedContractEvent<
      VerificationStatusUpdatedEvent.InputTuple,
      VerificationStatusUpdatedEvent.OutputTuple,
      VerificationStatusUpdatedEvent.OutputObject
    >;
    VerificationStatusUpdated: TypedContractEvent<
      VerificationStatusUpdatedEvent.InputTuple,
      VerificationStatusUpdatedEvent.OutputTuple,
      VerificationStatusUpdatedEvent.OutputObject
    >;
  };
}
